/***
*	Title："设计模式" 项目
*		主题：工厂方法
*	Description：
*	    业务需求：实现一个导出数据的应用框架，来让客户选择数据的导出方式，并真正的执行数据导出
*	                （通常这种框架系统在导出数据上会有一些约定的方式，如：导出为文本格式、数据库格式、xml格式等）
*	              
*	    需求知识点分析：
*	            1、框架是什么？（框架是能完成一定功能的半成品软件）
*	            2、框架能做什么？（能完成一定的功能，加快应用开发进度；给我们一个精良的程序架构）
*	            3、对框架的理解（基于框架的开发，事情还是那些事情，这是看谁做的问题；虽然基于框架开发，
*	                            可以不去做框架所做的事情，但是应该明白框架在做什么，以及框架是如何实现相应功能的）
*	            
*	            4、框架和设计模式的关系：
*	                《1》设计模式比框架更抽象（框架是已经实现出来的软件了，虽是半成品，但是已经实现了；但设计模式的重心是在解决问题的方案上，即思想层面）
*	                《2》设计模式是比框架更小的体系结构元素（框架的目标很明确，就是要解决某个领域的某些问题，是很具体的功能；不同领域实现出来的框架不一样）
*	                《3》框架比设计模式更加特例化（框架总是针对特定领域；  设计模式更加注重从思想是哪个、方法上解决问题，更加通用化）
*	            
*	    问题分析：
*	             1、需要实现导出数据的应用框架（即不管用户选择什么样的导出格式，最后打出的都是对应的文件；
*	               且系统并不知道究竟要导出成为什么样的文件；因此应该有一个统一的接口来描述系统最后生成的对象，
*	               并操作输出的文件） 【所以第一步就是设计一个导出文件的接口并定义导出方法】  
*	             2、对于实现导出数据的业务功能对象，它应该根据需要来创建相应的导出接口实现对象，因此特定的导出实现
*	                与具体的业务相关的；但是对于实现导出数据的业务功能对象来说，它并不知道应该创建哪一个导出接口对象，
*	                也不知道如何创建【即：对于实现导出数据业务的对象，它需要创建导出接口的具体对象，但它只知道导出接口
*	                却不知道其具体的实现，此时应该怎么办？】
*	                   
*	Date：2025
*	Version：0.1版本
*	Author：Coffee
*	Modify Recoder：
 ***/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FactoryMethodPattern
{
    /// <summary>
    /// 导出文件对象的接口
    /// </summary>
    internal interface IExportFile
    {
        //导出内容为文件
        bool Export(string data);


    }//Interface_end
}
